<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: linux | As a SW/Ops/DB Engineer]]></title>
  <link href="http://tech.riywo.com/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://tech.riywo.com/"/>
  <updated>2013-09-27T01:30:06-07:00</updated>
  <id>http://tech.riywo.com/</id>
  <author>
    <name><![CDATA[riywo]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[fcache - file cache for parallel processes]]></title>
    <link href="http://tech.riywo.com/blog/2013/05/10/fcache-file-cache-for-parallel-processes/"/>
    <updated>2013-05-10T01:46:00-07:00</updated>
    <id>http://tech.riywo.com/blog/2013/05/10/fcache-file-cache-for-parallel-processes</id>
    <content type="html"><![CDATA[<p>以前からたまーにこういうのがあるとうれしいケースがあるなぁと思ってたので作りました。</p>

<ul>
<li><a href="https://github.com/riywo/fcache">riywo/fcache · GitHub</a></li>
</ul>


<p>どういうものかというと、こういう感じで何かstdoutに吐き出すコマンドの前に<code>fcache EXPIRE_SEC</code>というのを付け足して実行すると、初回はコマンドを実行して結果をファイルに保存しつつstdoutにも出力します。</p>

<pre><code>$ fcache 10 curl -s example.com
hoge
</code></pre>

<p>次に、同じ<code>fcache</code>コマンドを叩くと、保存されているキャッシュファイルの時刻を見て、expire時刻を過ぎてなければ単にそのファイルの中身をstdoutに吐き出して終了します。</p>

<pre><code>$ fcache 10 curl -s example.com # 実際はcurlは実行されない
hoge
</code></pre>

<p>expire時刻を過ぎていれば初回と同じ動きをしてキャッシュを更新してくれます。<code>flock</code>を使って、読み込みだけなら共有ロックで並列に、書き込みが発生する時には排他ロック、みたいな処理をしてます(が何分まともな排他制御書いたことないのできっとバグってます。。。)</p>

<!-- more -->


<h2>何の役に立つの？</h2>

<p>特に監視の処理の中で、ほぼ同時に並列で1つのAPIを叩く監視項目があった時に、みんなが同じAPIを叩くのは非効率だなぁと思った時に効果があります(つまりニッチ)。何も気にせず<code>fcache</code>コマンドを並列に実行すれば、最初の人がAPIを叩いてキャッシュしてくれて、あとの人はキャッシュを利用してくれます。</p>

<p>例えばZabbixという監視ソフトには<code>UserParameter</code>というagent側でコマンドを実行して数値を返す、みたいなのが定義できます。</p>

<pre><code>$ curl -s localhost
aaa 1
bbb 2
ccc 3

$ cat /path/to/zabbix_agentd.conf
UserParameter=example.key[*],curl -s localhost | grep $1 | cut -f 2
</code></pre>

<p>上の様な設定をしたサーバがあったとすると、<code>zabbix_get</code>で<code>aaa</code>,<code>bbb</code>,<code>ccc</code>の値が取れます。</p>

<pre><code>$ zabbix_get -s server -k example.key[aaa]
1
$ zabbix_get -s server -k example.key[bbb]
2
$ zabbix_get -s server -k example.key[ccc]
3
</code></pre>

<p>ただし、これだと3回<code>curl</code>が呼ばれます。もし<code>curl</code>を減らしたいなら、1つのitemでスクリプトを実行してその中で1回だけ<code>curl</code>してから全てのキーについて<code>zabbix_sender</code>で送る、とかも考えられます。</p>

<pre><code>$ cat /path/to/zabbix_agentd.conf
UserParameter=example.key,/path/to/script # 中でzabbix_senderを複数実行
</code></pre>

<p><code>fcache</code>を使うとシンプルに実現できます。これならキャッシュの有効期間中は<code>curl</code>は叩かれませんし、configも素直です。</p>

<pre><code>$ cat /path/to/zabbix_agentd.conf
UserParameter=example.key[*],fcache 10 curl -s localhost | grep $1 | cut -f 2
</code></pre>

<h2>おわりに</h2>

<p>適当に作った上に、自分で使ってるわけでもないので自己責任でご利用下さい。こういうコンセプトがあってもおもしろいよねという提案がしたかったのと、ちょうどpythonの勉強がしたかったので、自分的には満足です。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[mruby on MIPS in PQI Air Pen]]></title>
    <link href="http://tech.riywo.com/blog/2013/05/07/mruby-on-mips-in-pqi-air-pen/"/>
    <updated>2013-05-07T07:40:00-07:00</updated>
    <id>http://tech.riywo.com/blog/2013/05/07/mruby-on-mips-in-pqi-air-pen</id>
    <content type="html"><![CDATA[<p>moyashi さんの記事を読んで以来、ずっと欲しかったPQI Airシリーズなんですが、USのAmazonでは売ってなかったり無駄に高かったりして二の足を踏んでました。ある日、郵便局を使うと数百円で荷物が送れることが分かったので、日本のAmazonで買って実家に発送して送ってもらうことでついにゲットしました。</p>

<ul>
<li><a href="http://hitoriblog.com/?p=12627">ひとりぶろぐ » デジカメ内部でRubyを動かす狂気！無線LAN内蔵SDカードアダプタPQI Air Cardの間違った使い方</a></li>
<li><a href="http://hitoriblog.com/?p=15926">ひとりぶろぐ » ポケット無線LANルータの新顔PQI Air Penの著しく間違った使い方</a></li>
</ul>


<p>ただ、Cardの方を動かせるmicroSDを持ってなかったので、今はPenでちょっと遊んでみただけです。何をやったかというと、<code>mruby</code>を動かしてみました。CRubyはちょっと動かせる自信なかったですが、最初から組み込み向けの<code>mruby</code>なら簡単かなぁと思ってやってみたら簡単でした。</p>

<!-- more -->


<h2>Cross Compile</h2>

<p>PQI AirのハードウェアはCPUがMIPSで、使い慣れているx86/x86_64とは違います。ので単にいつもLinuxで使ってるバイナリをコピーしてもダメです。</p>

<pre><code># cat /proc/cpuinfo
system type             : Atheros AR9330 (Hornet)
processor               : 0
cpu model               : MIPS 24Kc V7.4
BogoMIPS                : 232.96
wait instruction        : yes
microsecond timers      : yes
tlb_entries             : 16
extra interrupt vector  : yes
hardware watchpoint     : yes, count: 4, address/irw mask: [0x0000, 0x0c68, 0x0ff8, 0x0393]
ASEs implemented        : mips16
shadow register sets    : 1
core                    : 0
VCED exceptions         : not available
VCEI exceptions         : not available
</code></pre>

<p>さすがにここでコンパイルするのは、その環境を準備するところで挫折しそうなのでクロスコンパイル(別のアーキテクチャ用のバイナリをコンパイルする)をしました。</p>

<p>やり方はmoyashiさんが紹介されているSourcery CodeBenchというツールチェインを使って静的リンクでコンパイルしただけです。楽チン。</p>

<ul>
<li><a href="http://www.mentor.com/embedded-software/sourcery-tools/sourcery-codebench/editions/lite-edition/">Sourcery CodeBench Lite Edition &ndash; Mentor Graphics</a></li>
</ul>


<p>Macで動かすにはこれ自体をセルフビルドする必要があったので萎えて、Vagrantで適当に32bit Linuxを起動して、インストール。適当に<code>PATH</code>を通しておきます。以下は<code>Vagrantfile</code>の例。</p>

<pre><code>$ cat Vagrantfile
Vagrant.configure("2") do |config|
  config.vm.box = "precise32"
  config.vm.box_url = "http://files.vagrantup.com/precise32.box"
  config.vm.provision :shell, :inline =&gt; "apt-get install build-essential -y"
end
$ vagrant up
$ vagrant ssh
</code></pre>

<p><code>mruby</code>は最近ビルド方法が変わったらしく、rubyが必要なのでこれも適当に。Vagrantのboxだと大抵入ってるかな。あと必要なパッケージも適当に。Vagrantfileに書いといてもいいね。</p>

<pre><code>$ sudo apt-get install bison git
</code></pre>

<p>これで適当にクロスコンパイルの準備ができました。</p>

<h2>make mruby</h2>

<p>とりあえずコード取ってきます。</p>

<pre><code>$ git clone https://github.com/mruby/mruby.git
$ cd mruby
</code></pre>

<p><code>mruby</code>は<code>build_config.rb</code>というファイルでコンパイルの方法を色々変えられます(多分)。今回は以下を追加してみました。意味は簡単でMIPS用の<code>gcc</code>や<code>ar</code>が先ほどのSoucery CodeBenchに入ってるので、それを適当なオプションとともに指定してるだけです。</p>

<pre><code>MRuby::CrossBuild.new('pqi-air') do |conf|
  toolchain :gcc

  conf.gembox 'default'
  conf.cc.command = "mips-linux-gnu-gcc"
  conf.cc.flags &lt;&lt; %w(-g -O2 -Wall -static -march=24kc)
  conf.linker.command = "mips-linux-gnu-gcc"
  conf.linker.flags &lt;&lt; %w(-s -static)
  conf.archiver.command = "mips-linux-gnu-ar"
end
</code></pre>

<p>もともとある<code>MRuby::Build</code>の方を消すと<code>undefined method 'build_dir' for nil:NilClass</code>なるエラーになってしまうのでそれも残しておきます(何かやり方間違ってる気が。。。)</p>

<p>あとは<code>make</code>したらできあがり。</p>

<pre><code>$ make
ruby ./minirake
(in /home/vagrant/mruby)

Build summary:

================================================
      Config Name: pqi-air
 Output Directory: build/pqi-air
         Binaries: mrbc
    Included Gems:
             mruby-sprintf
             mruby-print
             mruby-math
             mruby-time
             mruby-struct
             mruby-enum-ext
             mruby-string-ext
             mruby-numeric-ext
             mruby-array-ext
             mruby-hash-ext
             mruby-range-ext
             mruby-proc-ext
             mruby-symbol-ext
             mruby-random
             mruby-bin-mirb
               - Binaries: mirb
             mruby-bin-mruby
               - Binaries: mruby
================================================

$ file build/pqi-air/bin/*
build/pqi-air/bin/mirb:  ELF 32-bit MSB executable, MIPS, MIPS32 rel2 version 1, statically linked, for GNU/Linux 2.6.12, with unknown capability 0x41000000 = 0xf676e75, with unknown capability 0x10000 = 0x70401, stripped
build/pqi-air/bin/mrbc:  ELF 32-bit MSB executable, MIPS, MIPS32 rel2 version 1, statically linked, for GNU/Linux 2.6.12, with unknown capability 0x41000000 = 0xf676e75, with unknown capability 0x10000 = 0x70401, stripped
build/pqi-air/bin/mruby: ELF 32-bit MSB executable, MIPS, MIPS32 rel2 version 1, statically linked, for GNU/Linux 2.6.12, with unknown capability 0x41000000 = 0xf676e75, with unknown capability 0x10000 = 0x70401, stripped
</code></pre>

<h2>実行！</h2>

<p>あとは出来上がったフォルダ一式(と言いつつ静的リンクした実行ファイルしか試してませんが。。。)をPQI Air Penに挿したSDカードにコピーしたら実行！</p>

<pre><code># ./mruby -e 'p 1+1'
2
# ./mirb
mirb - Embeddable Interactive Ruby Shell

This is a very early version, please test and report errors.
Thanks :)

&gt; a = {:foo =&gt; 1, :bar =&gt; 2}
 =&gt; {:foo=&gt;1, :bar=&gt;2}
&gt; a.each { |k,v| p "#{k} =&gt; #{v}" }
"foo =&gt; 1"
"bar =&gt; 2"
 =&gt; {:foo=&gt;1, :bar=&gt;2}
</code></pre>

<p>感動的ですね、こんなちっこいマシンの上でrubyが動くなんて。<code>mirb</code>は<code>readline</code>がないせいか、カーソルキー効かなくて不便ですが。。。</p>

<p><code>mruby</code>のことは実はさっぱり分かってないのですが、色々楽しめそうです。興味ある方はぜひ遊んでみて下さい or 遊び方教えて下さい。</p>

<iframe src="http://rcm-jp.amazon.co.jp/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=futuristamazo-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=B00BNAST0O" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>




<iframe src="http://rcm-jp.amazon.co.jp/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=futuristamazo-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=B009HF63GE" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[webtail + ncat = simple log monitoring!]]></title>
    <link href="http://tech.riywo.com/blog/2013/04/23/webtail-plus-ncat-equals-simple-log-monitoring-slash/"/>
    <updated>2013-04-23T18:58:00-07:00</updated>
    <id>http://tech.riywo.com/blog/2013/04/23/webtail-plus-ncat-equals-simple-log-monitoring-slash</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/r7kamura/webtail">webtail</a> is a super simple log monitoring tool. You can monitor a log streaming on a server via your web browser.</p>

<p>I wanted to monitor multi servers log, so I tried <code>ncat</code> in <code>mmap</code>. <code>ncat</code> supports multi sessions.</p>

<ul>
<li><a href="http://nmap.org/ncat/">Ncat &ndash; Netcat for the 21st Century</a></li>
</ul>


<!-- more -->


<p>Here is an example.</p>

<pre><code>## monitor server
mon&gt; ncat -l -k 10000 | webtail

## web servers
web1&gt; tail -F access_log | sed -e 's/^/web1 /' | nc mon 10000
web2&gt; tail -F access_log | sed -e 's/^/web2 /' | nc mon 10000
web3&gt; tail -F access_log | sed -e 's/^/web3 /' | nc mon 10000
</code></pre>

<p>You can monitor all web servers logs with a single web page.</p>

<p>Enjoy!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ec2-zabbix - setup zabbix on EC2]]></title>
    <link href="http://tech.riywo.com/blog/2013/04/18/ec2-zabbix/"/>
    <updated>2013-04-18T22:56:00-07:00</updated>
    <id>http://tech.riywo.com/blog/2013/04/18/ec2-zabbix</id>
    <content type="html"><![CDATA[<p>I created a small repository to setup zabbix server on EC2. You can try a zabbix server super easily.</p>

<!-- more -->


<ul>
<li><a href="https://github.com/riywo/ec2-zabbix">riywo/ec2-zabbix · GitHub</a></li>
</ul>


<p>This is extremely simple because of <a href="http://www.vagrantup.com/">Vagrant</a>, <a href="http://berkshelf.com/">Berkshelf</a> and <a href="http://community.opscode.com/cookbooks">Opscode Community Cookbooks</a>.</p>

<p>At first, I tried to use <a href="http://aws.amazon.com/opsworks/">AWS OpsWorks</a>, but it was not suitable for using the community cookbooks.</p>

<h2>Conclusion</h2>

<p>Let&rsquo;s try zabbix in your EC2 environment!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Awesome Docker!そして環境管理について思うところ]]></title>
    <link href="http://tech.riywo.com/blog/2013/04/17/awesome-docker/"/>
    <updated>2013-04-17T01:16:00-07:00</updated>
    <id>http://tech.riywo.com/blog/2013/04/17/awesome-docker</id>
    <content type="html"><![CDATA[<p>最近個人プロダクトでやってたことは、</p>

<ul>
<li><a href="https://github.com/riywo/myroku-cookbooks">Myroku</a>

<ul>
<li>private PaaS</li>
<li>社内とかで自由にHerokuっぽいことやりたい</li>
</ul>
</li>
<li><a href="https://github.com/riywo/pandler">Pandler</a>

<ul>
<li>package isolation</li>
<li>rpmを完璧に管理した環境を作りたい</li>
</ul>
</li>
</ul>


<p>みたいな感じなんですが、一人でスキマ時間で頑張ってたものなのでクオリティは最低ですし、全然完成しませんでした。本当に作る才能がない。</p>

<p>というところで、ネットサーフィンしてたら、最近dotCloudがDockerというのをOSSで出したということを知りました。</p>

<ul>
<li><a href="http://www.docker.io/">Docker &ndash; the Linux container runtime</a></li>
<li><a href="http://www.infoq.com/news/2013/03/Docker">Docker: Automated and Consistent Software Deployments</a></li>
</ul>


<p>dotCloudはPaaSをやってる会社で、DockerはLXC(Linux Container)を使った実行環境管理ツールの様です。dotCloudの社内でも使われているものみたいですね。</p>

<!-- more -->


<h2>隔離環境</h2>

<p>Pandlerでやりたかったことは、chrootで全く新しいroot filesystemを作ってそこにrpmを完璧に管理してインストールしプロセスを実行することだったんですが、DockerはLXCを使ってそれを実現してます。正確にはパッケージ管理の部分はLXCのイメージ？(実はLXC触ったことない。。。)にしてるのでDSL的な管理はできていないですが、実行環境をホストから隔離して実行するという意味では同じです。というか、Vagrant、ひいてはprivate cloud全般も同じ感じですね。</p>

<p>実際、PaaS的なことをやろうと思うとなにがしかの方法で環境を隔離して管理しないといけなくて、Herokuもdynoという単位でVMを表現していますが、これもLXCの様です。</p>

<p>Myrokuではもっと単純なアプローチで、LLの実行環境(処理系＋ライブラリ群)のみを固定化してプロセスを立ち上げればいいかなと思い、自作の<a href="https://github.com/riywo/ruby-llenv">llenv</a>を使って、LLの処理系およびLLのライブラリ群を1ディレクトリに入れて実行するという方式を取りました。ついでにそれをcapistranoで配布して、フロントのHTTPリバースプロキシと連携してポート番号を割り当てて、VirtualHostで出し分ける、みたいなところまでやりました。</p>

<p>一方、Pandlerはchrootを使って固定化してみました。chrootの良い点は変なオーバヘッドなくシンプルに使えることと、IPアドレス始めリソースの配分を考える<strong>必要が無い</strong>ということだと思います。Pandlerは利用者にはchrootであることを意識しなくても実行できるような感じをイメージしていたので、そういう面倒事をなるべく排除したかったです(LXC詳しくないので実はそういうことやらなくて済む方法もあるのかも知れません)。あと、rootユーザじゃなくても実行できたらと思ってfakechrootとかも見てました。</p>

<p>環境の隔離をもっとも素直にやるなら、今は各種仮想マシンを利用するのが手っ取り早いですね。XenやVMware、KVMにVirtualBox、果てはそれらをまとめて管理する環境(OpenStackとか)まで、もうすでにたくさんの選択肢がありますが、僕がやってきたようなやり方も環境隔離の一つのやり方だと思います。</p>

<h2>なんで必要なの？</h2>

<p>僕がどうしてここまでこの分野にこだわってるかというと、別にPaaSがやりたいわけではなくて、プロセスの実行環境(特にファイル資源)を出来る限りホストOSそれ自身から切り離したいからです。</p>

<p>なぜ？それはOSのインストール自体＝Kernelを起動するまでと、アプリケーションを動かすレイヤを分けることで、様々なインフラ上で同じアプリケーションを動作させることができるようになるからです。（ただし僕の頭の中ではLinuxのことしか考えてません）</p>

<p>様々なインフラとは、仮想マシンやパブリッククラウド、VPSやオンプレミスなサーバなどです。これらの間でOSおよびパッケージ群を完全に揃えることは大変に困難を極めます。それぞれの環境でサポートしているディストリやバージョンが違ったりしますし、諸々の理由で既にインストールされているものと衝突する場合もあります。ChefやPuppetなどの構成管理ツールでホストOSを管理する方法をとってもこれは解決しません。</p>

<p>じゃあ、JVMの様にそれぞれの環境上にVMを入れてしまえばいいじゃない、つまり、どの環境であれとにかくKVMなりを使える様にしてしまえばイメージの使い回しができる、というのはまぁそのとおりなんですが、それじゃあどの環境も使うメリットがありません。オンプレミスを使いたい場面は大抵ハードウェアのスペックを使い切りたいわけですし、クラウドのサーバで仮想マシンを動かすのはなんかおかしいです(もちろんクラウド自身がそのイメージを使えればいいですが)。</p>

<p>最近は、LLの処理系は**env的なツールを使って一般ユーザでビルドからやってしまえば、ホストOSに依存せずにどこでも同じ環境が再現できる！という意見も出てきそうですが、結局ホストOSに入っているライブラリ(libなんとかとか)は使っちゃうわけで、そのバージョンが違えば当然挙動が変わってしまいます。これは処理系だけじゃなくて、その後インストールするLL自身のパッケージも同様で、C拡張系のパッケージは激しくホストOSに依存しますので、BundlerやCartonを使った管理も100%完璧ではありません。</p>

<p>僕が最近思ってるよさげな妥協点としては、Dockerの様にKernelは環境によって差異があるかもしれないけど、アプリケーションのファイル資源はホストOSとは完全に切り離されていて、libなんとかも全部自前で揃えている環境と必ずセットで管理するのがいいと思ってます。</p>

<h2>Bundled application</h2>

<p>ファイル資源をアプリケーションとセットにすることで、このファイルをコピーして実行するだけで、アプリケーションを簡単にどこでも再現できます。もちろんLXCを使うならLXCが使えるKernelじゃないとダメですが、逆にいうとそこさえクリアすればいいわけです。実際、DockerはEC2でも動くみたいです。</p>

<p>で、こうすることでなにがいいのか？例えばあるサービスをEC2で始めたとして、成長に伴い次はVPS、最後はオンプレミスへと移行するというケースや、反対にオンプレミスのサービスの縮小に伴いEC2に移行したいといったケースで威力を発揮します。こうした移行は大抵ものすごい労力を伴います。ただでさえ開発に忙しいのに、コスト計算・比較もしなくちゃいけないし、いろんな他のシステム(DNSとかLBとか)も一式移さなきゃいけない。その上、移行したらOSのバージョン相違やライブラリの相違で動かなくなるかもしれない恐怖と戦うには、相当の体力が必要になります。実行環境がある程度切り離せていれば、そこまで苦もなく移せる可能性が高まります。</p>

<p>また、開発環境と本番環境の差異も減らせます。開発環境は仮想マシン、本番環境はオンプレミスみたいなケースはよくあると思いますが、どうしてもいろんな差分が生まれてしまい、それを綺麗に揃えることに労力を割けるのはこれまた相当な体力がないと続きません。Bundledであれば、(もちろん設定ファイルとかは出し分けますが)一式同じライブラリで開発から本番に持っていくことができますし、テストもしやすくなります。</p>

<p>Ops的にも利点があります。モニタリングに必要なツール一式をBundledできれば、それをとにかく配布すればどんな環境であれおなじ監視ツールがすぐ使える(cgroupsで他のプロセス見えないとかどうすんだろ)とか、アプリケーションがなんであれOSインストール時は自由に作ることができるから、その環境特有の設定や監視を統一的に管理できるとかもできそうです。例えばこのデータセンタはこのネットワークの設定が必要、みたいなのってアプリケーションからはなるべく切り離したいですよね。</p>

<h2>DockerとかTravisとかMesos</h2>

<p>で、まぁこういうことをそもそも既にやってるのがPaaSなんですが、中々その中の仕組みが実装レベルで外に出てくることはなかったので、Dockerはちょっと参考にしたいと思います。もしくは使ってみたい。</p>

<p>あと、Travis CIみたいなテスト環境系も実は同じようなことをやっているなと思って、前に手元で動かしてみようと試みたことがあることを書いておきます。萎えてやめましたが。</p>

<p>おまけで、MesosってのがLXCをもっと高度に抽象化して、クラスタで並べたnodeのmemoryとcpuリソースをアプリケーションに適切に配分するとかやってるみたいですが、詳しくは知りません。Twitterはガシガシ使っているそうです。</p>

<ul>
<li><a href="http://incubator.apache.org/mesos/">Apache Mesos: Dynamic Resource Sharing for Clusters</a></li>
</ul>


<h2>おわりに</h2>

<p>Dockerが良さそうだなぁと思ったので、ここ最近考えてることを合わせて言語化しておきました。英語で書くには英語力が足りないのと誰にも読んでもらえないorz</p>

<p>問題はこれが所詮POCで、こういうことを実際にやるモチベーションは特にないので、机上の空論感がとても強いこと。多少の環境の差異はなんとなく乗りきれちゃったりするしそもそも完璧に管理する必要ないことが多い。もしくは寿命ギリギリまで環境を出来る限り変えずにやり過ごすのが一番簡単なやり方なので、今頑張る必要なくて、そしてずっと頑張る必要がないような話題だったりもします。この辺はサービスのライフサイクルとかも絡めて話をしたいところです。</p>

<p>ただ夢を見続けることはした方がいいのかなと思うのと、そもそもその夢間違ってるよってのも言って欲しくてとりあえず書きなぐっておきました。</p>
]]></content>
  </entry>
  
</feed>
