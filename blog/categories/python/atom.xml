<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: python | As a SW/Ops/DB Engineer]]></title>
  <link href="http://tech.riywo.com/blog/categories/python/atom.xml" rel="self"/>
  <link href="http://tech.riywo.com/"/>
  <updated>2013-05-13T19:45:54-07:00</updated>
  <id>http://tech.riywo.com/</id>
  <author>
    <name><![CDATA[riywo]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[fcache - file cache for parallel processes]]></title>
    <link href="http://tech.riywo.com/blog/2013/05/10/fcache-file-cache-for-parallel-processes/"/>
    <updated>2013-05-10T01:46:00-07:00</updated>
    <id>http://tech.riywo.com/blog/2013/05/10/fcache-file-cache-for-parallel-processes</id>
    <content type="html"><![CDATA[<p>以前からたまーにこういうのがあるとうれしいケースがあるなぁと思ってたので作りました。</p>

<ul>
<li><a href="https://github.com/riywo/fcache">riywo/fcache · GitHub</a></li>
</ul>


<p>どういうものかというと、こういう感じで何かstdoutに吐き出すコマンドの前に<code>fcache EXPIRE_SEC</code>というのを付け足して実行すると、初回はコマンドを実行して結果をファイルに保存しつつstdoutにも出力します。</p>

<pre><code>$ fcache 10 curl -s example.com
hoge
</code></pre>

<p>次に、同じ<code>fcache</code>コマンドを叩くと、保存されているキャッシュファイルの時刻を見て、expire時刻を過ぎてなければ単にそのファイルの中身をstdoutに吐き出して終了します。</p>

<pre><code>$ fcache 10 curl -s example.com # 実際はcurlは実行されない
hoge
</code></pre>

<p>expire時刻を過ぎていれば初回と同じ動きをしてキャッシュを更新してくれます。<code>flock</code>を使って、読み込みだけなら共有ロックで並列に、書き込みが発生する時には排他ロック、みたいな処理をしてます(が何分まともな排他制御書いたことないのできっとバグってます。。。)</p>

<!-- more -->


<h2>何の役に立つの？</h2>

<p>特に監視の処理の中で、ほぼ同時に並列で1つのAPIを叩く監視項目があった時に、みんなが同じAPIを叩くのは非効率だなぁと思った時に効果があります(つまりニッチ)。何も気にせず<code>fcache</code>コマンドを並列に実行すれば、最初の人がAPIを叩いてキャッシュしてくれて、あとの人はキャッシュを利用してくれます。</p>

<p>例えばZabbixという監視ソフトには<code>UserParameter</code>というagent側でコマンドを実行して数値を返す、みたいなのが定義できます。</p>

<pre><code>$ curl -s localhost
aaa 1
bbb 2
ccc 3

$ cat /path/to/zabbix_agentd.conf
UserParameter=example.key[*],curl -s localhost | grep $1 | cut -f 2
</code></pre>

<p>上の様な設定をしたサーバがあったとすると、<code>zabbix_get</code>で<code>aaa</code>,<code>bbb</code>,<code>ccc</code>の値が取れます。</p>

<pre><code>$ zabbix_get -s server -k example.key[aaa]
1
$ zabbix_get -s server -k example.key[bbb]
2
$ zabbix_get -s server -k example.key[ccc]
3
</code></pre>

<p>ただし、これだと3回<code>curl</code>が呼ばれます。もし<code>curl</code>を減らしたいなら、1つのitemでスクリプトを実行してその中で1回だけ<code>curl</code>してから全てのキーについて<code>zabbix_sender</code>で送る、とかも考えられます。</p>

<pre><code>$ cat /path/to/zabbix_agentd.conf
UserParameter=example.key,/path/to/script # 中でzabbix_senderを複数実行
</code></pre>

<p><code>fcache</code>を使うとシンプルに実現できます。これならキャッシュの有効期間中は<code>curl</code>は叩かれませんし、configも素直です。</p>

<pre><code>$ cat /path/to/zabbix_agentd.conf
UserParameter=example.key[*],fcache 10 curl -s localhost | grep $1 | cut -f 2
</code></pre>

<h2>おわりに</h2>

<p>適当に作った上に、自分で使ってるわけでもないので自己責任でご利用下さい。こういうコンセプトがあってもおもしろいよねという提案がしたかったのと、ちょうどpythonの勉強がしたかったので、自分的には満足です。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[python mox example]]></title>
    <link href="http://tech.riywo.com/blog/2013/04/19/python-mox-example/"/>
    <updated>2013-04-19T19:55:00-07:00</updated>
    <id>http://tech.riywo.com/blog/2013/04/19/python-mox-example</id>
    <content type="html"><![CDATA[<p>Pythonの小さいスクリプトを書いたんですが、せっかくなんでテストも書いてみようと思ってあがいたメモ。やりたかったのは、スクリプトの中で行ってるIO(ファイルとIPC)をテスト中は上書きして、テストデータを返す、みたいなこと。</p>

<!-- more -->


<p>初めは<code>mock</code>というのでやってたんですが、<code>subprocess.Popen()</code>がさらにメソッドを呼び出す形で使うのでどうやってやったらいいのか分からなくて、<code>mox</code>を使ってとりあえずできたのでそれを記録。</p>

<p><code>Example.run()</code>は、ファイルを読み込んだ内容とコマンド実行結果をつなげて返すだけ。</p>

<script src="https://gist.github.com/riywo/5424458.js"></script>


<p>もっとスマートなやり方やオススメもモジュールがあればぜひ教えてくださいませ〜</p>

<p>cf. <a href="http://stackoverflow.com/questions/5237693/mocking-openfile-name-in-unit-tests">python - Mocking open(file_name) in unit tests - Stack Overflow</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[multiple assignment from regexp]]></title>
    <link href="http://tech.riywo.com/blog/2013/04/17/multiple-assignment-from-regexp/"/>
    <updated>2013-04-17T18:22:00-07:00</updated>
    <id>http://tech.riywo.com/blog/2013/04/17/multiple-assignment-from-regexp</id>
    <content type="html"><![CDATA[<p>Sometimes I want to assign multiple variables from results of regexp matching. Here are the ways in some LLs.</p>

<!-- more -->


<h3>Perl</h3>

<pre><code>my ($a, $b) = ("a:1 b:2" =~ /a:(\d) b:(\d)/);
# or
my ($a, $b) = "a:1 b:2" =~ /a:(\d) b:(\d)/;
</code></pre>

<h3>Ruby</h3>

<pre><code>a, b = "a:1 b:2".match(/a:(\d) b:(\d)/) {[$1, $2]}
# or
a, b = "a:1 b:2".match(/a:(\d) b:(\d)/).to_a[1, 2]
</code></pre>

<h3>Python</h3>

<pre><code>import re
a, b = re.match(r'a:(\d) b:(\d)', "a:1 b:2").group(1, 2)
</code></pre>

<h2>Conclusion</h2>

<ul>
<li>Perl

<ul>
<li>simplest</li>
<li>needs parentheses for multiple assignment

<ul>
<li>parentheses for matching are not mandatory, though</li>
</ul>
</li>
</ul>
</li>
<li>Ruby

<ul>
<li><code>match</code> is a method of <code>String</code> class</li>
<li>give a block or slice an array</li>
</ul>
</li>
<li>Python

<ul>
<li>needs <code>re</code> module</li>
<li><code>match</code> is a method of <code>re</code></li>
</ul>
</li>
</ul>


<p>Enjoy!</p>

<hr />

<p>簡単にファイルをパースしたい時とかに、Perlで書いた正規表現でさくっと変数に多重代入したりしてたんですが、Ruby/Pythonだとどうやるのか分からなかったのでまとめ。Thanks to @_shimada, @methane, @kyoendo, @toku_bass</p>

<p>namedcapture版も作ってみたい。というかそもそもオレオレLL比較チートシート作りたい。</p>

<ul>
<li>参考

<ul>
<li><a href="http://0xcc.net/blog/archives/000137.html">文字列操作の比較表: Ruby, Python, JavaScript, Perl, C++ - bkブログ</a></li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
</feed>
