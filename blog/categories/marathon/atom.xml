<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: marathon | As a SW/Ops/DB Engineer]]></title>
  <link href="http://tech.riywo.com/blog/categories/marathon/atom.xml" rel="self"/>
  <link href="http://tech.riywo.com/"/>
  <updated>2014-12-26T01:21:17+09:00</updated>
  <id>http://tech.riywo.com/</id>
  <author>
    <name><![CDATA[riywo]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Fluentd on Mesos + Docker + Marathon]]></title>
    <link href="http://tech.riywo.com/blog/2013/12/20/fluentd-on-mesos-plus-docker-plus-marathon/"/>
    <updated>2013-12-20T17:13:00+09:00</updated>
    <id>http://tech.riywo.com/blog/2013/12/20/fluentd-on-mesos-plus-docker-plus-marathon</id>
    <content type="html"><![CDATA[<p>I just tried to run Fluentd instances on Mesos + Docker + Marathon in Vagrant boxes. Here is the sample repository.</p>

<ul>
<li><a href="https://github.com/riywo/sample-fluentd-on-mesos-docker">riywo/sample-fluentd-on-mesos-docker</a></li>
</ul>


<p>The overview diagram:</p>

<p><img src="https://cacoo.com/diagrams/9XIEXwoUNUvOOuZ2-AB7C1.png" alt="diagram" /></p>

<!-- more-->


<h2>How?</h2>

<p>See the github README.md.</p>

<h2>What?</h2>

<h3>Fluentd</h3>

<ul>
<li><a href="http://fluentd.org/">Fluentd: Open Source Log Management</a></li>
</ul>


<p>Fluentd is one of log collector middleware. Most web companies in Japan use this for log collecting. td-agent is a package version of fluentd including ruby interpreter.</p>

<p>Some uses want to spin up multiple fluentd workers across many physical servers because fluentd only use one cpu core. Mesos is the right software to manage such situation.</p>

<h3>Mesos</h3>

<ul>
<li><a href="http://mesos.apache.org/">Apache Mesos</a></li>
</ul>


<p>Computer resource management software. You can combine many servers as a one &ldquo;virtual computer&rdquo; with Mesos. Mesos itself is just allocating resources, so you have to use frameworks to manage these resources.</p>

<h3>Marathon</h3>

<ul>
<li><a href="https://github.com/mesosphere/marathon">mesosphere/marathon</a></li>
</ul>


<p>Marathon is a framework on Mesos, which is like &ldquo;upstart for virtual computer&rdquo;. Marathon makes sure the number of running tasks, so if one of Mesos slave goes down, Marathon starts new instances on other slaves.</p>

<p>Marathon also manages port of instances. You can get the list of host:port of your applications just asking Marathon API; this is kind of service discovery.</p>

<h3>Docker</h3>

<ul>
<li><a href="https://www.docker.io/">Homepage - Docker: the Linux container engine</a></li>
</ul>


<p>LXC manager. You don&rsquo;t have to take care of server environment any more. Just create a docker container and commit it. Then, you can run the application anywhere you want. This is very convenient for computer cluster like Mesos.</p>

<p>Mesosphere provides a simple Mesos executor for docker. It runs docker container and bind ports, so you can connect containers from outside of the slave.</p>

<h3>HAProxy</h3>

<ul>
<li><a href="http://haproxy.1wt.eu/">HAProxy - The Reliable, High Performance TCP/HTTP Load Balancer</a></li>
</ul>


<p>Fluentd has http input interface, so I connect them with HAProxy running on Docker. First getting the list of host:port from Marathon, then generating config file of HAProxy. If the list is updated, just restart the HAProxy container.</p>

<h3>Elasticsearch, Kibana</h3>

<ul>
<li><a href="http://www.elasticsearch.org/">Open Source Distributed Real Time Search &amp; Analytics | Elasticsearch</a></li>
<li><a href="http://www.elasticsearch.org/overview/kibana/">Kibana | Overview | Elasticsearch</a></li>
</ul>


<p>Elasticsearch and Kibana is one of the best combination of storing logs and visualizing them.</p>

<p>Fluentd has pluggable input/output and there is Elasticsearch output plugin. I installed it in the fluentd docker image. Giving ES host:port to the container as environment variables, fluentd can connect the ES. I run ES and Kibana on Docker, too.</p>

<h2>Conclusion</h2>

<p>It was very interesting exercise for me. I&rsquo;d like to keep practicing Mesos, Docker, Marathon, Vagrant, whatever. I hope this sample helps you, too.</p>

<p>BTW, there were so much trouble especially Vagrant integration. <code>/etc/hosts</code> file is very tricky. I&rsquo;d like to know more reasonable way to manage Vagrant hosts information…</p>

<h2>References</h2>

<ul>
<li><a href="https://github.com/mesosphere/mesos-docker">mesosphere/mesos-docker</a></li>
<li><a href="http://mesosphere.io/2013/09/26/docker-on-mesos/">Mesosphere · Docker on Mesos</a></li>
<li><a href="http://techcrunch.com/2013/09/26/mesosphere-adds-docker-support-to-its-mesos-based-operating-system-for-the-data-center/">Mesosphere Adds Docker Support To Its Mesos-Based Operating System For The Data Center | TechCrunch</a></li>
<li><a href="http://www.slideshare.net/AishFenton/mesos-docker">Mesos ♥ Docker</a>

<ul>
<li><a href="http://www.youtube.com/watch?v=2MmnggSmTJo">▶ Docker ♥ Mesos - YouTube</a></li>
</ul>
</li>
<li><a href="http://typesafe.com/blog/play-framework-grid-deployment-with-mesos">Play Framework Grid Deployment with Mesos – Blog - Typesafe</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[mesos introduction 1]]></title>
    <link href="http://tech.riywo.com/blog/2013/09/27/mesos-introduction-1/"/>
    <updated>2013-09-27T00:53:00+09:00</updated>
    <id>http://tech.riywo.com/blog/2013/09/27/mesos-introduction-1</id>
    <content type="html"><![CDATA[<p>Today, Mesosphere released an important milestone. I really desired this integration.</p>

<ul>
<li><a href="http://mesosphere.io/2013/09/26/docker-on-mesos/">Mesosphere · Docker on Mesos</a></li>
</ul>


<p>Now, we can manage our &ldquo;Computers as an OS&rdquo;.</p>

<ul>
<li>Kernel

<ul>
<li><a href="http://mesos.apache.org/">Mesos</a></li>
</ul>
</li>
<li>Process

<ul>
<li><a href="https://www.docker.io/">Docker</a></li>
</ul>
</li>
<li>Init

<ul>
<li><a href="https://github.com/mesosphere/marathon">Marathon</a></li>
</ul>
</li>
<li>Cron

<ul>
<li><a href="https://github.com/airbnb/chronos">Chronos</a></li>
</ul>
</li>
</ul>


<!-- more -->


<p>I would like to learn this new generation &ldquo;OS&rdquo;, so I started to play with Mesos. Mesosphere is a great company and they built packages of Mesos and Marathon. Building Mesos and tools are most painful part of this ecosystem, but now we can super easily start to use Mesos and Marathon. Thanks, Mesosphere:)</p>

<p>I use AWS for Mesos cluster. At first, I created a m1.small instance for a master of Mesos, Zookeeper and Marathon. I use EC2-Classic.</p>

<ul>
<li>AMI

<ul>
<li>Ubuntu Server 13.04</li>
</ul>
</li>
<li>Security Group

<ul>
<li>From any src IP

<ul>
<li>22(ssh)</li>
<li>2181(zk)</li>
<li>5050(mesos master)</li>
<li>5051(mesos slave)</li>
<li>8080(marathon)</li>
</ul>
</li>
</ul>
</li>
</ul>


<p>And I set user-data as an initial setup script:</p>

<pre><code>#!/bin/bash
curl -fL https://raw.github.com/mesosphere/mesos-docker/master/bin/mesos-docker-setup | bash
echo manual &gt;&gt; /etc/init/mesos-slave.conf
reboot
</code></pre>

<p>After the instance is ready, you can access Mesos(5050) and Marathon(8080) from your browser. I associated an EIP to the master.</p>

<p>Then, I requested 10 spot instances for slaves. Same type(m1.small), same AMI, same security group, and user-data:</p>

<pre><code>#!/bin/bash
curl -fL https://raw.github.com/mesosphere/mesos-docker/master/bin/mesos-docker-setup | bash
echo manual &gt;&gt; /etc/init/mesos-master.conf
echo manual &gt;&gt; /etc/init/marathon.conf
echo manual &gt;&gt; /etc/init/zookeeper.conf
echo 'zk://YOUR_MASTER_EIP:2181/mesos' &gt; /etc/mesos/zk
reboot
</code></pre>

<p>After a while, you can see 10 slaves, 10 CPUs and 6GB Mem on your Mesos dashboard! Wow! This is your new &ldquo;OS&rdquo;!</p>

<p>Now you can run ANY process using Mesosphere&rsquo;s Mesos, Marathon and Docker integration. Why don&rsquo;t you request Redis processes to your Marathon?</p>

<pre><code>$ http POST http://YOUR_MASTER_EIP:8080/v1/apps/start \
          id=multidis instances=2 mem=512 cpus=0.5 \
          executor=/var/lib/mesos/executors/docker \
          cmd='johncosta/redis'
</code></pre>

<p>This request will start 2 tasks and use 1 CPU and 1GB Mem. You can scale it very easily. Awesome…, awesome…</p>

<h2>Next step</h2>

<ul>
<li>Build Chronos</li>
<li>Run Chronos on Marathon</li>
<li>Create Docker image and run it on Marathon</li>
<li>Integration with <a href="https://github.com/coreos/etcd">etcd</a>, or something

<ul>
<li>Configuration of 12factor app</li>
</ul>
</li>
<li>Integration with <a href="http://ceph.com/">Ceph</a> or other storage

<ul>
<li>For virtual storage</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
</feed>
