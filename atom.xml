<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[As a SW/Ops/DB Engineer]]></title>
  <link href="http://tech.riywo.com/atom.xml" rel="self"/>
  <link href="http://tech.riywo.com/"/>
  <updated>2013-06-18T18:35:36-07:00</updated>
  <id>http://tech.riywo.com/</id>
  <author>
    <name><![CDATA[riywo]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[git rollback]]></title>
    <link href="http://tech.riywo.com/blog/2013/06/18/git-rollback/"/>
    <updated>2013-06-18T17:20:00-07:00</updated>
    <id>http://tech.riywo.com/blog/2013/06/18/git-rollback</id>
    <content type="html"><![CDATA[<p>One day, I wanted to rollback git repository to a previous commit with a new &ldquo;rollback&rdquo; commit because the wrong commits had already pushed to the master.</p>

<!-- more -->


<h3>MODIFIED: The best way is <code>git revert -n INITHASH..HEAD</code>!</h3>

<p>Thanks, @miyagawa!</p>

<pre><code>$ git init
$ echo important &gt; important
$ touch important_empty
$ git add .
$ git commit -m 'init'
$ ls
important       important_empty

$ git rm important important_empty
$ echo wrong &gt; wrong
$ touch wrong_empty
$ git add .
$ git commit -m 'wrong' ## WRONG COMMIT!
$ ls
wrong       wrong_empty

$ git revert -n INITHASH..HEAD
# On branch master
# Changes to be committed:
#   (use "git reset HEAD &lt;file&gt;..." to unstage)
#
#   new file:   important
#   renamed:    wrong_empty -&gt; important_empty
#   deleted:    wrong
#
$ ls
important       important_empty
</code></pre>

<h3>old posts</h3>

<p><del>Generally, <code>git revert -n HASH</code> works, however, if some files are added or deleted, it doesn&rsquo;t work well. Here is an example.</del></p>

<p><code>git revert</code> is not the way to revert &ldquo;to HASH&rdquo;, but to revert &ldquo;HASH&rdquo;.</p>

<pre><code>$ git revert -n INITHASH  ## want to rollback to INITHASH
$ git status
# On branch master
nothing to commit, working directory clean
$ ls
wrong       wrong_empty
</code></pre>

<p>So, I tried some ways. First, <code>git checkout INITHASN .</code>. It worked only for deleted files.</p>

<pre><code>$ git checkout INITHASH .
$ git status
# On branch master
# Changes to be committed:
#   (use "git reset HEAD &lt;file&gt;..." to unstage)
#
#   new file:   important
#   new file:   important_empty
#
$ ls
important       important_empty wrong           wrong_empty
</code></pre>

<p>Second, <code>git checkout -b rollback INITHASH</code> and <code>git merge</code>. Unfortunately, <code>INITHASH</code> had already merged, so it happened nothing.</p>

<pre><code>$ git checkout -b rollback INITHASH
$ ls
important       important_empty
$ git checkout master
$ git merge rollback
Already up-to-date.
</code></pre>

<p>Third, <code>git diff</code> and <code>patch</code>. It affected only non-empty files because <code>git diff</code> output for empty files was not good for <code>patch</code> command.</p>

<pre><code>$ git diff HEAD..INITHASH | patch -p1
patching file important
patching file wrong
$ git status
# On branch master
# Changes not staged for commit:
#   (use "git add/rm &lt;file&gt;..." to update what will be committed)
#   (use "git checkout -- &lt;file&gt;..." to discard changes in working directory)
#
#   deleted:    wrong
#
# Untracked files:
#   (use "git add &lt;file&gt;..." to include in what will be committed)
#
#   important
no changes added to commit (use "git add" and/or "git commit -a")
$ ls
important   wrong_empty
</code></pre>

<p>Finally, I found the best way, that is <code>git apply</code>.</p>

<pre><code>$ git diff HEAD..INITHASH &gt; /tmp/patch
$ git apply /tmp/patch
$ git status
# On branch master
# Changes not staged for commit:
#   (use "git add/rm &lt;file&gt;..." to update what will be committed)
#   (use "git checkout -- &lt;file&gt;..." to discard changes in working directory)
#
#   deleted:    wrong
#   deleted:    wrong_empty
#
# Untracked files:
#   (use "git add &lt;file&gt;..." to include in what will be committed)
#
#   important
#   important_empty
no changes added to commit (use "git add" and/or "git commit -a")
$ ls
important       important_empty
</code></pre>

<p>Hey, git experts, is this the best way to create a new &ldquo;rollback&rdquo; commit?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[anyenv]]></title>
    <link href="http://tech.riywo.com/blog/2013/06/11/anyenv/"/>
    <updated>2013-06-11T00:23:00-07:00</updated>
    <id>http://tech.riywo.com/blog/2013/06/11/anyenv</id>
    <content type="html"><![CDATA[<p>I developed a experimental simple wrapper for <a href="https://github.com/sstephenson/rbenv">rbenv</a>-style version managers.</p>

<ul>
<li><a href="https://github.com/riywo/anyenv">riywo/anyenv</a></li>
</ul>


<!-- more -->


<p>If you add only two lines below in your shell profile, you can use any **env.</p>

<pre><code>export PATH="$HOME/.anyenv/bin:$PATH"
eval "$(anyenv init -)"
</code></pre>

<p><code>anyenv</code> recognizes <code>$ANYENV_ROOT/envs/*</code> as rbenv-style version managers, so <code>anyenv init -</code> outputs <code>export **ENV_ROOT=$ANYENV_ROOT/envs/**env</code>, <code>**env init -</code> and adds <code>$ANYENV_ROOT/envs/**env/bin</code> to <code>$PATH</code>.</p>

<p>Enjoy!</p>

<hr />

<p>rbenvっぽい感じのが結構増えてきて、その度にprofileに足すのがだるいなぁと思ったので、やっつけで<code>anyenv</code>というのを作ってみました。</p>

<ul>
<li><a href="https://github.com/riywo/anyenv">riywo/anyenv</a></li>
</ul>


<p><code>git clone</code>して、以下２行を足せば、<code>~/.anyenv/envs/**env</code>が自動で使えるようになります。</p>

<pre><code>export PATH="$HOME/.anyenv/bin:$PATH"
eval "$(anyenv init -)"
</code></pre>

<p>ご意見募集中。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[provisioning itself]]></title>
    <link href="http://tech.riywo.com/blog/2013/05/13/provisioning-itself/"/>
    <updated>2013-05-13T19:15:00-07:00</updated>
    <id>http://tech.riywo.com/blog/2013/05/13/provisioning-itself</id>
    <content type="html"><![CDATA[<p>これ読んで思ったこと。</p>

<ul>
<li><a href="http://d.hatena.ne.jp/mizchi/20130512/1368351397">プログラミングはそれ自体が目的であっていい &ndash; mizchi log</a></li>
</ul>


<p>全く同じ所感を、昨今のserver provisioningブームやクラウド万歳を見てて思う。</p>

<!-- more -->


<h2>「動けばいい」サーバ構築</h2>

<p>programmingそれ自体は歴史が積み上げられていて、「動けばいい」が悪であることやそれを如何にして回避するかということについて、偏執的な人達の惜しみない努力が費やされた結果、次のステージへ移っていっているような気がする。(僕はコード書いたことないのであくまで外野の推測)</p>

<p>一方、provisioning(サーバを構築する)とかその他operationにまつわる物事はその昔programmingが通ってきた道をやっと歩み始めたところ。例えばprovisioningにおいて「動けばいい」は手で対話式に構築されたサーバみたいなもの。手順書すらなかったりして、bashのhistoryと現状の状態をつぶさに観察して同じ状況を作るにはどうすればいいかを解析したことあるけど、リバースエンジニアリングっぽくて後から任された人には全然生産的じゃない。けど、それはそれで地雷を踏みまくるトレーニングになって、実際僕もそういうのをたくさん経験して全部今役に立ってる。</p>

<h2>偏執的な貢献</h2>

<p>ChefとかPuppetはそういうのを一歩先にすすめてくれるツールで、まず正しい状態はなんだったでしょう？から入ってサーバの状態を定義して、それに持っていく部分をいい感じにヘルプしてくれる。けどまだ完璧じゃない。当然だ、まだまだ「provisioningだけ」を目的にしている偏執的な人達の貢献が足りない。</p>

<p>CやJavaだけがプログラミング言語ではないのと同様に、provisioning一つ取ったってやり方は無限にある。僕は<a href="https://speakerdeck.com/riywo/ops-tool-made-by-perl-beginner-number-yapcasia-2012">Touryo</a>というツールを作って一つの方式を実現したし、それは今では<a href="http://serverspec.org/">serverspec</a>とprovisioningツールの組み合わせで実現できるなぁと思ってる。（ホントはもっと色々必要だけど割愛）</p>

<p>別に「インフラがコードになる」とかそういうのはどうでもいいプロパガンダで、本質的に僕が大事にしたいと思ってるのは、一部の言語マニアの様に偏執的に「運用」に取り組める人がどれだけ出てくるのかというところ。僕は多分偏執的な考えだけは持ってて実装力が無い人なので、思いついたアイデア(<a href="https://github.com/riywo/ruby-llenv">llenv</a>とか<a href="https://github.com/riywo/myroku-cookbooks">myroku</a>とか<a href="https://github.com/riywo/pandler">pandler</a>とか)をひーこらしながら実装してそこで力尽きてるけど、これからもっと才能あふれる人達がやってくることを期待してて、彼らのためになんかできないかなーと日々悶々としてる。</p>

<p>まだまだこの分野、学術的な研究も実践的な積み上げも足りてないと思う(学術分野は未調査なので誰か補足が欲しい)。なので「ウェブオペレーション」にもあった様に、徒弟制度の様な形がありふれてしまっている様に思う。が、致し方ないことであり、これから体系化されて行ったり、これまで想像もつかなかったようなパラダイムが出現したりするのが本当に楽しみだ。多分すでに企業の中とか組織の中とかには色々存在するんだろうけど、教科書的にまとまってるのは無いように思う。</p>

<h2>おわりに</h2>

<p>「サーバ構築なんて一度やったらあとはやらなくていいじゃん」とか「なんでパッケージ一つ入れるだけなのに/スクリプト一つ撒くだけなのにこんなにめんどくさいことするの？」とか思ってる人は、自分が「動けばいい」と思っているんだと認識した方がいいと思う。それはいつなんどきも悪ということではないけど、先のエントリにあるように悪となる場面も確実に存在する。そして昨今そういう状況が増えているからこそ、provisioningブームが存在するんだと思う。書けなかったけど、クラウドブームも僕には同じように映ってる。</p>

<p>というわけで、アナロジーを全開にするならmizchiさんの「糞コードを一箇所に押し込める」リファクタリングはprovisioningにも応用できそうだなーと思ったところでこれを書いた。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[fcache - file cache for parallel processes]]></title>
    <link href="http://tech.riywo.com/blog/2013/05/10/fcache-file-cache-for-parallel-processes/"/>
    <updated>2013-05-10T01:46:00-07:00</updated>
    <id>http://tech.riywo.com/blog/2013/05/10/fcache-file-cache-for-parallel-processes</id>
    <content type="html"><![CDATA[<p>以前からたまーにこういうのがあるとうれしいケースがあるなぁと思ってたので作りました。</p>

<ul>
<li><a href="https://github.com/riywo/fcache">riywo/fcache · GitHub</a></li>
</ul>


<p>どういうものかというと、こういう感じで何かstdoutに吐き出すコマンドの前に<code>fcache EXPIRE_SEC</code>というのを付け足して実行すると、初回はコマンドを実行して結果をファイルに保存しつつstdoutにも出力します。</p>

<pre><code>$ fcache 10 curl -s example.com
hoge
</code></pre>

<p>次に、同じ<code>fcache</code>コマンドを叩くと、保存されているキャッシュファイルの時刻を見て、expire時刻を過ぎてなければ単にそのファイルの中身をstdoutに吐き出して終了します。</p>

<pre><code>$ fcache 10 curl -s example.com # 実際はcurlは実行されない
hoge
</code></pre>

<p>expire時刻を過ぎていれば初回と同じ動きをしてキャッシュを更新してくれます。<code>flock</code>を使って、読み込みだけなら共有ロックで並列に、書き込みが発生する時には排他ロック、みたいな処理をしてます(が何分まともな排他制御書いたことないのできっとバグってます。。。)</p>

<!-- more -->


<h2>何の役に立つの？</h2>

<p>特に監視の処理の中で、ほぼ同時に並列で1つのAPIを叩く監視項目があった時に、みんなが同じAPIを叩くのは非効率だなぁと思った時に効果があります(つまりニッチ)。何も気にせず<code>fcache</code>コマンドを並列に実行すれば、最初の人がAPIを叩いてキャッシュしてくれて、あとの人はキャッシュを利用してくれます。</p>

<p>例えばZabbixという監視ソフトには<code>UserParameter</code>というagent側でコマンドを実行して数値を返す、みたいなのが定義できます。</p>

<pre><code>$ curl -s localhost
aaa 1
bbb 2
ccc 3

$ cat /path/to/zabbix_agentd.conf
UserParameter=example.key[*],curl -s localhost | grep $1 | cut -f 2
</code></pre>

<p>上の様な設定をしたサーバがあったとすると、<code>zabbix_get</code>で<code>aaa</code>,<code>bbb</code>,<code>ccc</code>の値が取れます。</p>

<pre><code>$ zabbix_get -s server -k example.key[aaa]
1
$ zabbix_get -s server -k example.key[bbb]
2
$ zabbix_get -s server -k example.key[ccc]
3
</code></pre>

<p>ただし、これだと3回<code>curl</code>が呼ばれます。もし<code>curl</code>を減らしたいなら、1つのitemでスクリプトを実行してその中で1回だけ<code>curl</code>してから全てのキーについて<code>zabbix_sender</code>で送る、とかも考えられます。</p>

<pre><code>$ cat /path/to/zabbix_agentd.conf
UserParameter=example.key,/path/to/script # 中でzabbix_senderを複数実行
</code></pre>

<p><code>fcache</code>を使うとシンプルに実現できます。これならキャッシュの有効期間中は<code>curl</code>は叩かれませんし、configも素直です。</p>

<pre><code>$ cat /path/to/zabbix_agentd.conf
UserParameter=example.key[*],fcache 10 curl -s localhost | grep $1 | cut -f 2
</code></pre>

<h2>おわりに</h2>

<p>適当に作った上に、自分で使ってるわけでもないので自己責任でご利用下さい。こういうコンセプトがあってもおもしろいよねという提案がしたかったのと、ちょうどpythonの勉強がしたかったので、自分的には満足です。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sonic Notify - a real broadcasting]]></title>
    <link href="http://tech.riywo.com/blog/2013/05/07/sonic-notify-a-real-broadcasting/"/>
    <updated>2013-05-07T21:57:00-07:00</updated>
    <id>http://tech.riywo.com/blog/2013/05/07/sonic-notify-a-real-broadcasting</id>
    <content type="html"><![CDATA[<h2>前置きというか能書き</h2>

<p>アプリ作りたいですよね、アプリ。今日なんか作れないかなーと思って妄想してました。昨日こういうアプリを見かけて、</p>

<ul>
<li><a href="http://veadardiary.blog29.fc2.com/blog-entry-4473.html">iOSデバイスを画面に重ね合わせるだけでファイルの送受信ができる『PutOn Mac』 &ndash; Macの手書き説明書</a></li>
</ul>


<p>なるほど、もうTCP/IPで通信できるのは当たり前すぎて、その上でできること考えるよりも、なんか別な通信方法考えるの面白いかもなぁと思いました。</p>

<p>上のアプリは多分映像のチカチカを使って0と1の情報を伝えてるんだと思いますが、だったら音声でもできるよね、と。音声だとブロードキャスト(ひとつの音源で沢山の人に伝えること)できるので映像より面白そう。</p>

<!-- more -->


<ul>
<li><a href="http://awesomegeekblog.blogspot.com/2009/04/file-transfer-over-sound-card-ii-phase.html">Awesome Geek Blog: File transfer over sound card II: Phase Shift Keying</a></li>
</ul>


<p>探してみるとこういうことやってる人がいました。音を鳴らしてその信号にファイルの中身を乗っけて通信してしまうと。でもせっかくだったら人間の可聴域以外を使ってやれると、人間には聞こえないけど機械には聞こえる音であら不思議ファイルが転送できたりしたら魔法っぽくておもしろそう！</p>

<h2>Sonic Notify</h2>

<p>ということで色々下調べを初めて1時間、既にありました。。。しかもすごいのが。</p>

<ul>
<li><a href="http://sonicnotify.com/#!">Sonic Notify</a></li>
</ul>


<p>これまさにさっき上に書いたことそのまんまを既に実現してるみたいです。具体的な技術内容を見つけられてないのですが、アプリの挙動を見るにおそらく人間には聞こえない範囲の音を発生させてると思います。</p>

<p>上記のサイトにあるdemoページの動画を、iPhoneアプリ起動した状態で視聴すると、あら不思議、ところどころで通知がきます。動画の音をミュートにすると通知はきません。</p>

<ul>
<li><a href="http://sonicnotify.com/#!/demos">デモページ</a></li>
</ul>


<p>ユーザ登録すると、自分でも試せるのでやってみました。コンポーネントはこんな感じ。</p>

<ul>
<li>Studio

<ul>
<li>実際のプロモーションを表現してる</li>
<li>Programを追加するとStudioが出来る感じ？</li>
<li>いろんなタイプがある（Live Concert, In-Store Display, Live Sportsなど)</li>
<li>ContentsをStudioに対して指定できる

<ul>
<li>通知を受けた時の情報で画像とタイトル、URLやミニサイトを指定できる</li>
</ul>
</li>
</ul>
</li>
<li>App

<ul>
<li>iOSとAndroidのSDKがあるので、自分のアプリに組み込める</li>
<li>テスト用には、先ほどインストールしたアプリに新しく作成したアプリのGUIDを反映させればOK</li>
</ul>
</li>
<li>Channel

<ul>
<li>実際に信号を送る側の定義</li>
<li>いろんなデバイスを売ってる！

<ul>
<li>コンセントに差すだけのやつ、音声信号の出力ができるやつ、など</li>
</ul>
</li>
<li>テスト用にMacのクライアントアプリを利用した

<ul>
<li>起動して適当に新しいChannel名指定して繋ぐ</li>
</ul>
</li>
</ul>
</li>
</ul>


<p>Program作って、Studio画面でAppとChannelを紐付けたら、多分クライアントアプリから音が出てます。iPhoneのアプリのGUIDを切り替えたら自分の設定した画像とリンクが通知されました。すごい。</p>

<h2>中身推察</h2>

<p>多分、</p>

<ul>
<li>アプリのGUIDが秘密鍵的なものになってる？

<ul>
<li>送信側と受信側で同じ鍵を設定すれば、その信号が取り出せる</li>
</ul>
</li>
<li>最終的に情報取り出す時にクライアントはインターネット通信してる

<ul>
<li>iPhoneをAirplaneモードにしたら受信してくれなかった</li>
<li>Sonic Notifyのサイトにデバイス毎の分析画面とかあるので多分この時情報送ってる？</li>
</ul>
</li>
</ul>


<h2>まとめ</h2>

<p>技術的興味津津なんですが、それはさておき色々使い道のある技術だとは思いませんか？ユースケースとして挙がってる、コンサート会場で観客にプレゼント配布とか、小売店でキャンペーン情報とか、リアルにその場にいる時に受け取ることに価値がある様なものにフィットしそう。</p>

<p>ちょうど今年はiOSアプリに挑戦したいと思ってたので、折を見てこのSDKを組み込んで遊んで見るかもしれませんが、先に人柱誰か！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[mruby on MIPS in PQI Air Pen]]></title>
    <link href="http://tech.riywo.com/blog/2013/05/07/mruby-on-mips-in-pqi-air-pen/"/>
    <updated>2013-05-07T07:40:00-07:00</updated>
    <id>http://tech.riywo.com/blog/2013/05/07/mruby-on-mips-in-pqi-air-pen</id>
    <content type="html"><![CDATA[<p>moyashi さんの記事を読んで以来、ずっと欲しかったPQI Airシリーズなんですが、USのAmazonでは売ってなかったり無駄に高かったりして二の足を踏んでました。ある日、郵便局を使うと数百円で荷物が送れることが分かったので、日本のAmazonで買って実家に発送して送ってもらうことでついにゲットしました。</p>

<ul>
<li><a href="http://hitoriblog.com/?p=12627">ひとりぶろぐ » デジカメ内部でRubyを動かす狂気！無線LAN内蔵SDカードアダプタPQI Air Cardの間違った使い方</a></li>
<li><a href="http://hitoriblog.com/?p=15926">ひとりぶろぐ » ポケット無線LANルータの新顔PQI Air Penの著しく間違った使い方</a></li>
</ul>


<p>ただ、Cardの方を動かせるmicroSDを持ってなかったので、今はPenでちょっと遊んでみただけです。何をやったかというと、<code>mruby</code>を動かしてみました。CRubyはちょっと動かせる自信なかったですが、最初から組み込み向けの<code>mruby</code>なら簡単かなぁと思ってやってみたら簡単でした。</p>

<!-- more -->


<h2>Cross Compile</h2>

<p>PQI AirのハードウェアはCPUがMIPSで、使い慣れているx86/x86_64とは違います。ので単にいつもLinuxで使ってるバイナリをコピーしてもダメです。</p>

<pre><code># cat /proc/cpuinfo
system type             : Atheros AR9330 (Hornet)
processor               : 0
cpu model               : MIPS 24Kc V7.4
BogoMIPS                : 232.96
wait instruction        : yes
microsecond timers      : yes
tlb_entries             : 16
extra interrupt vector  : yes
hardware watchpoint     : yes, count: 4, address/irw mask: [0x0000, 0x0c68, 0x0ff8, 0x0393]
ASEs implemented        : mips16
shadow register sets    : 1
core                    : 0
VCED exceptions         : not available
VCEI exceptions         : not available
</code></pre>

<p>さすがにここでコンパイルするのは、その環境を準備するところで挫折しそうなのでクロスコンパイル(別のアーキテクチャ用のバイナリをコンパイルする)をしました。</p>

<p>やり方はmoyashiさんが紹介されているSourcery CodeBenchというツールチェインを使って静的リンクでコンパイルしただけです。楽チン。</p>

<ul>
<li><a href="http://www.mentor.com/embedded-software/sourcery-tools/sourcery-codebench/editions/lite-edition/">Sourcery CodeBench Lite Edition &ndash; Mentor Graphics</a></li>
</ul>


<p>Macで動かすにはこれ自体をセルフビルドする必要があったので萎えて、Vagrantで適当に32bit Linuxを起動して、インストール。適当に<code>PATH</code>を通しておきます。以下は<code>Vagrantfile</code>の例。</p>

<pre><code>$ cat Vagrantfile
Vagrant.configure("2") do |config|
  config.vm.box = "precise32"
  config.vm.box_url = "http://files.vagrantup.com/precise32.box"
  config.vm.provision :shell, :inline =&gt; "apt-get install build-essential -y"
end
$ vagrant up
$ vagrant ssh
</code></pre>

<p><code>mruby</code>は最近ビルド方法が変わったらしく、rubyが必要なのでこれも適当に。Vagrantのboxだと大抵入ってるかな。あと必要なパッケージも適当に。Vagrantfileに書いといてもいいね。</p>

<pre><code>$ sudo apt-get install bison git
</code></pre>

<p>これで適当にクロスコンパイルの準備ができました。</p>

<h2>make mruby</h2>

<p>とりあえずコード取ってきます。</p>

<pre><code>$ git clone https://github.com/mruby/mruby.git
$ cd mruby
</code></pre>

<p><code>mruby</code>は<code>build_config.rb</code>というファイルでコンパイルの方法を色々変えられます(多分)。今回は以下を追加してみました。意味は簡単でMIPS用の<code>gcc</code>や<code>ar</code>が先ほどのSoucery CodeBenchに入ってるので、それを適当なオプションとともに指定してるだけです。</p>

<pre><code>MRuby::CrossBuild.new('pqi-air') do |conf|
  toolchain :gcc

  conf.gembox 'default'
  conf.cc.command = "mips-linux-gnu-gcc"
  conf.cc.flags &lt;&lt; %w(-g -O2 -Wall -static -march=24kc)
  conf.linker.command = "mips-linux-gnu-gcc"
  conf.linker.flags &lt;&lt; %w(-s -static)
  conf.archiver.command = "mips-linux-gnu-ar"
end
</code></pre>

<p>もともとある<code>MRuby::Build</code>の方を消すと<code>undefined method 'build_dir' for nil:NilClass</code>なるエラーになってしまうのでそれも残しておきます(何かやり方間違ってる気が。。。)</p>

<p>あとは<code>make</code>したらできあがり。</p>

<pre><code>$ make
ruby ./minirake
(in /home/vagrant/mruby)

Build summary:

================================================
      Config Name: pqi-air
 Output Directory: build/pqi-air
         Binaries: mrbc
    Included Gems:
             mruby-sprintf
             mruby-print
             mruby-math
             mruby-time
             mruby-struct
             mruby-enum-ext
             mruby-string-ext
             mruby-numeric-ext
             mruby-array-ext
             mruby-hash-ext
             mruby-range-ext
             mruby-proc-ext
             mruby-symbol-ext
             mruby-random
             mruby-bin-mirb
               - Binaries: mirb
             mruby-bin-mruby
               - Binaries: mruby
================================================

$ file build/pqi-air/bin/*
build/pqi-air/bin/mirb:  ELF 32-bit MSB executable, MIPS, MIPS32 rel2 version 1, statically linked, for GNU/Linux 2.6.12, with unknown capability 0x41000000 = 0xf676e75, with unknown capability 0x10000 = 0x70401, stripped
build/pqi-air/bin/mrbc:  ELF 32-bit MSB executable, MIPS, MIPS32 rel2 version 1, statically linked, for GNU/Linux 2.6.12, with unknown capability 0x41000000 = 0xf676e75, with unknown capability 0x10000 = 0x70401, stripped
build/pqi-air/bin/mruby: ELF 32-bit MSB executable, MIPS, MIPS32 rel2 version 1, statically linked, for GNU/Linux 2.6.12, with unknown capability 0x41000000 = 0xf676e75, with unknown capability 0x10000 = 0x70401, stripped
</code></pre>

<h2>実行！</h2>

<p>あとは出来上がったフォルダ一式(と言いつつ静的リンクした実行ファイルしか試してませんが。。。)をPQI Air Penに挿したSDカードにコピーしたら実行！</p>

<pre><code># ./mruby -e 'p 1+1'
2
# ./mirb
mirb - Embeddable Interactive Ruby Shell

This is a very early version, please test and report errors.
Thanks :)

&gt; a = {:foo =&gt; 1, :bar =&gt; 2}
 =&gt; {:foo=&gt;1, :bar=&gt;2}
&gt; a.each { |k,v| p "#{k} =&gt; #{v}" }
"foo =&gt; 1"
"bar =&gt; 2"
 =&gt; {:foo=&gt;1, :bar=&gt;2}
</code></pre>

<p>感動的ですね、こんなちっこいマシンの上でrubyが動くなんて。<code>mirb</code>は<code>readline</code>がないせいか、カーソルキー効かなくて不便ですが。。。</p>

<p><code>mruby</code>のことは実はさっぱり分かってないのですが、色々楽しめそうです。興味ある方はぜひ遊んでみて下さい or 遊び方教えて下さい。</p>

<iframe src="http://rcm-jp.amazon.co.jp/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=futuristamazo-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=B00BNAST0O" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>




<iframe src="http://rcm-jp.amazon.co.jp/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=futuristamazo-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=B009HF63GE" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[webtail + ncat = simple log monitoring!]]></title>
    <link href="http://tech.riywo.com/blog/2013/04/23/webtail-plus-ncat-equals-simple-log-monitoring-slash/"/>
    <updated>2013-04-23T18:58:00-07:00</updated>
    <id>http://tech.riywo.com/blog/2013/04/23/webtail-plus-ncat-equals-simple-log-monitoring-slash</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/r7kamura/webtail">webtail</a> is a super simple log monitoring tool. You can monitor a log streaming on a server via your web browser.</p>

<p>I wanted to monitor multi servers log, so I tried <code>ncat</code> in <code>mmap</code>. <code>ncat</code> supports multi sessions.</p>

<ul>
<li><a href="http://nmap.org/ncat/">Ncat &ndash; Netcat for the 21st Century</a></li>
</ul>


<!-- more -->


<p>Here is an example.</p>

<pre><code>## monitor server
mon&gt; ncat -l -k 10000 | webtail

## web servers
web1&gt; tail -F access_log | sed -e 's/^/web1 /' | nc mon 10000
web2&gt; tail -F access_log | sed -e 's/^/web2 /' | nc mon 10000
web3&gt; tail -F access_log | sed -e 's/^/web3 /' | nc mon 10000
</code></pre>

<p>You can monitor all web servers logs with a single web page.</p>

<p>Enjoy!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[python mox example]]></title>
    <link href="http://tech.riywo.com/blog/2013/04/19/python-mox-example/"/>
    <updated>2013-04-19T19:55:00-07:00</updated>
    <id>http://tech.riywo.com/blog/2013/04/19/python-mox-example</id>
    <content type="html"><![CDATA[<p>Pythonの小さいスクリプトを書いたんですが、せっかくなんでテストも書いてみようと思ってあがいたメモ。やりたかったのは、スクリプトの中で行ってるIO(ファイルとIPC)をテスト中は上書きして、テストデータを返す、みたいなこと。</p>

<!-- more -->


<p>初めは<code>mock</code>というのでやってたんですが、<code>subprocess.Popen()</code>がさらにメソッドを呼び出す形で使うのでどうやってやったらいいのか分からなくて、<code>mox</code>を使ってとりあえずできたのでそれを記録。</p>

<p><code>Example.run()</code>は、ファイルを読み込んだ内容とコマンド実行結果をつなげて返すだけ。</p>

<script src="https://gist.github.com/riywo/5424458.js"></script>


<p>もっとスマートなやり方やオススメもモジュールがあればぜひ教えてくださいませ〜</p>

<p>cf. <a href="http://stackoverflow.com/questions/5237693/mocking-openfile-name-in-unit-tests">python &ndash; Mocking open(file_name) in unit tests &ndash; Stack Overflow</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Yet Another shell script]]></title>
    <link href="http://tech.riywo.com/blog/2013/04/19/yet-another-shell-script/"/>
    <updated>2013-04-19T14:54:00-07:00</updated>
    <id>http://tech.riywo.com/blog/2013/04/19/yet-another-shell-script</id>
    <content type="html"><![CDATA[<p>How about such an alternative shell script?</p>

<!-- more -->




<script src="https://gist.github.com/riywo/5423408.js"></script>


<p>I will try to implement this in ruby for POC.</p>

<h3>P.S.</h3>

<p>Here is a draft written by @okitan, awesome!</p>

<script src="https://gist.github.com/okitan/5423791.js"></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ec2-zabbix - setup zabbix on EC2]]></title>
    <link href="http://tech.riywo.com/blog/2013/04/18/ec2-zabbix/"/>
    <updated>2013-04-18T22:56:00-07:00</updated>
    <id>http://tech.riywo.com/blog/2013/04/18/ec2-zabbix</id>
    <content type="html"><![CDATA[<p>I created a small repository to setup zabbix server on EC2. You can try a zabbix server super easily.</p>

<!-- more -->


<ul>
<li><a href="https://github.com/riywo/ec2-zabbix">riywo/ec2-zabbix · GitHub</a></li>
</ul>


<p>This is extremely simple because of <a href="http://www.vagrantup.com/">Vagrant</a>, <a href="http://berkshelf.com/">Berkshelf</a> and <a href="http://community.opscode.com/cookbooks">Opscode Community Cookbooks</a>.</p>

<p>At first, I tried to use <a href="http://aws.amazon.com/opsworks/">AWS OpsWorks</a>, but it was not suitable for using the community cookbooks.</p>

<h2>Conclusion</h2>

<p>Let&rsquo;s try zabbix in your EC2 environment!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Programming languages I use recently]]></title>
    <link href="http://tech.riywo.com/blog/2013/04/18/programming-languages-i-use-recently/"/>
    <updated>2013-04-18T08:51:00-07:00</updated>
    <id>http://tech.riywo.com/blog/2013/04/18/programming-languages-i-use-recently</id>
    <content type="html"><![CDATA[<p>Here is a list of programming languages in which I write code.</p>

<!-- more -->


<h3>Java</h3>

<p>for <a href="https://www.coursera.org/course/algs4partII">Algorithms, Part II | Coursera</a></p>

<h3>C</h3>

<p>for <a href="https://www.coursera.org/course/hwswinterface">The Hardware/Software Interface | Coursera</a></p>

<h3>Objective-C</h3>

<p>for <a href="https://itunes.apple.com/us/course/coding-together-developing/id593208016">Coding Together: Developing Apps for iPhone and iPad (Winter 2013) &ndash; Download Free Content from Stanford on iTunes</a></p>

<h3>Python</h3>

<p>for work</p>

<h3>Perl</h3>

<p>for work</p>

<h3>Ruby</h3>

<p>for work and fun</p>

<h2>Conclusion</h2>

<p>Comparing languages with each other is so interesting that I need more languages:)</p>

<p>cf. <a href="http://weblog.riywo.com/todo">TODO</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[multiple assignment from regexp]]></title>
    <link href="http://tech.riywo.com/blog/2013/04/17/multiple-assignment-from-regexp/"/>
    <updated>2013-04-17T18:22:00-07:00</updated>
    <id>http://tech.riywo.com/blog/2013/04/17/multiple-assignment-from-regexp</id>
    <content type="html"><![CDATA[<p>Sometimes I want to assign multiple variables from results of regexp matching. Here are the ways in some LLs.</p>

<!-- more -->


<h3>Perl</h3>

<pre><code>my ($a, $b) = ("a:1 b:2" =~ /a:(\d) b:(\d)/);
# or
my ($a, $b) = "a:1 b:2" =~ /a:(\d) b:(\d)/;
</code></pre>

<h3>Ruby</h3>

<pre><code>a, b = "a:1 b:2".match(/a:(\d) b:(\d)/) {[$1, $2]}
# or
a, b = "a:1 b:2".match(/a:(\d) b:(\d)/).to_a[1, 2]
</code></pre>

<h3>Python</h3>

<pre><code>import re
a, b = re.match(r'a:(\d) b:(\d)', "a:1 b:2").group(1, 2)
</code></pre>

<h2>Conclusion</h2>

<ul>
<li>Perl

<ul>
<li>simplest</li>
<li>needs parentheses for multiple assignment

<ul>
<li>parentheses for matching are not mandatory, though</li>
</ul>
</li>
</ul>
</li>
<li>Ruby

<ul>
<li><code>match</code> is a method of <code>String</code> class</li>
<li>give a block or slice an array</li>
</ul>
</li>
<li>Python

<ul>
<li>needs <code>re</code> module</li>
<li><code>match</code> is a method of <code>re</code></li>
</ul>
</li>
</ul>


<p>Enjoy!</p>

<hr />

<p>簡単にファイルをパースしたい時とかに、Perlで書いた正規表現でさくっと変数に多重代入したりしてたんですが、Ruby/Pythonだとどうやるのか分からなかったのでまとめ。Thanks to @_shimada, @methane, @kyoendo, @toku_bass</p>

<p>namedcapture版も作ってみたい。というかそもそもオレオレLL比較チートシート作りたい。</p>

<ul>
<li>参考

<ul>
<li><a href="http://0xcc.net/blog/archives/000137.html">文字列操作の比較表: Ruby, Python, JavaScript, Perl, C++ &ndash; bkブログ</a></li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Awesome Docker!そして環境管理について思うところ]]></title>
    <link href="http://tech.riywo.com/blog/2013/04/17/awesome-docker/"/>
    <updated>2013-04-17T01:16:00-07:00</updated>
    <id>http://tech.riywo.com/blog/2013/04/17/awesome-docker</id>
    <content type="html"><![CDATA[<p>最近個人プロダクトでやってたことは、</p>

<ul>
<li><a href="https://github.com/riywo/myroku-cookbooks">Myroku</a>

<ul>
<li>private PaaS</li>
<li>社内とかで自由にHerokuっぽいことやりたい</li>
</ul>
</li>
<li><a href="https://github.com/riywo/pandler">Pandler</a>

<ul>
<li>package isolation</li>
<li>rpmを完璧に管理した環境を作りたい</li>
</ul>
</li>
</ul>


<p>みたいな感じなんですが、一人でスキマ時間で頑張ってたものなのでクオリティは最低ですし、全然完成しませんでした。本当に作る才能がない。</p>

<p>というところで、ネットサーフィンしてたら、最近dotCloudがDockerというのをOSSで出したということを知りました。</p>

<ul>
<li><a href="http://www.docker.io/">Docker &ndash; the Linux container runtime</a></li>
<li><a href="http://www.infoq.com/news/2013/03/Docker">Docker: Automated and Consistent Software Deployments</a></li>
</ul>


<p>dotCloudはPaaSをやってる会社で、DockerはLXC(Linux Container)を使った実行環境管理ツールの様です。dotCloudの社内でも使われているものみたいですね。</p>

<!-- more -->


<h2>隔離環境</h2>

<p>Pandlerでやりたかったことは、chrootで全く新しいroot filesystemを作ってそこにrpmを完璧に管理してインストールしプロセスを実行することだったんですが、DockerはLXCを使ってそれを実現してます。正確にはパッケージ管理の部分はLXCのイメージ？(実はLXC触ったことない。。。)にしてるのでDSL的な管理はできていないですが、実行環境をホストから隔離して実行するという意味では同じです。というか、Vagrant、ひいてはprivate cloud全般も同じ感じですね。</p>

<p>実際、PaaS的なことをやろうと思うとなにがしかの方法で環境を隔離して管理しないといけなくて、Herokuもdynoという単位でVMを表現していますが、これもLXCの様です。</p>

<p>Myrokuではもっと単純なアプローチで、LLの実行環境(処理系＋ライブラリ群)のみを固定化してプロセスを立ち上げればいいかなと思い、自作の<a href="https://github.com/riywo/ruby-llenv">llenv</a>を使って、LLの処理系およびLLのライブラリ群を1ディレクトリに入れて実行するという方式を取りました。ついでにそれをcapistranoで配布して、フロントのHTTPリバースプロキシと連携してポート番号を割り当てて、VirtualHostで出し分ける、みたいなところまでやりました。</p>

<p>一方、Pandlerはchrootを使って固定化してみました。chrootの良い点は変なオーバヘッドなくシンプルに使えることと、IPアドレス始めリソースの配分を考える<strong>必要が無い</strong>ということだと思います。Pandlerは利用者にはchrootであることを意識しなくても実行できるような感じをイメージしていたので、そういう面倒事をなるべく排除したかったです(LXC詳しくないので実はそういうことやらなくて済む方法もあるのかも知れません)。あと、rootユーザじゃなくても実行できたらと思ってfakechrootとかも見てました。</p>

<p>環境の隔離をもっとも素直にやるなら、今は各種仮想マシンを利用するのが手っ取り早いですね。XenやVMware、KVMにVirtualBox、果てはそれらをまとめて管理する環境(OpenStackとか)まで、もうすでにたくさんの選択肢がありますが、僕がやってきたようなやり方も環境隔離の一つのやり方だと思います。</p>

<h2>なんで必要なの？</h2>

<p>僕がどうしてここまでこの分野にこだわってるかというと、別にPaaSがやりたいわけではなくて、プロセスの実行環境(特にファイル資源)を出来る限りホストOSそれ自身から切り離したいからです。</p>

<p>なぜ？それはOSのインストール自体＝Kernelを起動するまでと、アプリケーションを動かすレイヤを分けることで、様々なインフラ上で同じアプリケーションを動作させることができるようになるからです。（ただし僕の頭の中ではLinuxのことしか考えてません）</p>

<p>様々なインフラとは、仮想マシンやパブリッククラウド、VPSやオンプレミスなサーバなどです。これらの間でOSおよびパッケージ群を完全に揃えることは大変に困難を極めます。それぞれの環境でサポートしているディストリやバージョンが違ったりしますし、諸々の理由で既にインストールされているものと衝突する場合もあります。ChefやPuppetなどの構成管理ツールでホストOSを管理する方法をとってもこれは解決しません。</p>

<p>じゃあ、JVMの様にそれぞれの環境上にVMを入れてしまえばいいじゃない、つまり、どの環境であれとにかくKVMなりを使える様にしてしまえばイメージの使い回しができる、というのはまぁそのとおりなんですが、それじゃあどの環境も使うメリットがありません。オンプレミスを使いたい場面は大抵ハードウェアのスペックを使い切りたいわけですし、クラウドのサーバで仮想マシンを動かすのはなんかおかしいです(もちろんクラウド自身がそのイメージを使えればいいですが)。</p>

<p>最近は、LLの処理系は**env的なツールを使って一般ユーザでビルドからやってしまえば、ホストOSに依存せずにどこでも同じ環境が再現できる！という意見も出てきそうですが、結局ホストOSに入っているライブラリ(libなんとかとか)は使っちゃうわけで、そのバージョンが違えば当然挙動が変わってしまいます。これは処理系だけじゃなくて、その後インストールするLL自身のパッケージも同様で、C拡張系のパッケージは激しくホストOSに依存しますので、BundlerやCartonを使った管理も100%完璧ではありません。</p>

<p>僕が最近思ってるよさげな妥協点としては、Dockerの様にKernelは環境によって差異があるかもしれないけど、アプリケーションのファイル資源はホストOSとは完全に切り離されていて、libなんとかも全部自前で揃えている環境と必ずセットで管理するのがいいと思ってます。</p>

<h2>Bundled application</h2>

<p>ファイル資源をアプリケーションとセットにすることで、このファイルをコピーして実行するだけで、アプリケーションを簡単にどこでも再現できます。もちろんLXCを使うならLXCが使えるKernelじゃないとダメですが、逆にいうとそこさえクリアすればいいわけです。実際、DockerはEC2でも動くみたいです。</p>

<p>で、こうすることでなにがいいのか？例えばあるサービスをEC2で始めたとして、成長に伴い次はVPS、最後はオンプレミスへと移行するというケースや、反対にオンプレミスのサービスの縮小に伴いEC2に移行したいといったケースで威力を発揮します。こうした移行は大抵ものすごい労力を伴います。ただでさえ開発に忙しいのに、コスト計算・比較もしなくちゃいけないし、いろんな他のシステム(DNSとかLBとか)も一式移さなきゃいけない。その上、移行したらOSのバージョン相違やライブラリの相違で動かなくなるかもしれない恐怖と戦うには、相当の体力が必要になります。実行環境がある程度切り離せていれば、そこまで苦もなく移せる可能性が高まります。</p>

<p>また、開発環境と本番環境の差異も減らせます。開発環境は仮想マシン、本番環境はオンプレミスみたいなケースはよくあると思いますが、どうしてもいろんな差分が生まれてしまい、それを綺麗に揃えることに労力を割けるのはこれまた相当な体力がないと続きません。Bundledであれば、(もちろん設定ファイルとかは出し分けますが)一式同じライブラリで開発から本番に持っていくことができますし、テストもしやすくなります。</p>

<p>Ops的にも利点があります。モニタリングに必要なツール一式をBundledできれば、それをとにかく配布すればどんな環境であれおなじ監視ツールがすぐ使える(cgroupsで他のプロセス見えないとかどうすんだろ)とか、アプリケーションがなんであれOSインストール時は自由に作ることができるから、その環境特有の設定や監視を統一的に管理できるとかもできそうです。例えばこのデータセンタはこのネットワークの設定が必要、みたいなのってアプリケーションからはなるべく切り離したいですよね。</p>

<h2>DockerとかTravisとかMesos</h2>

<p>で、まぁこういうことをそもそも既にやってるのがPaaSなんですが、中々その中の仕組みが実装レベルで外に出てくることはなかったので、Dockerはちょっと参考にしたいと思います。もしくは使ってみたい。</p>

<p>あと、Travis CIみたいなテスト環境系も実は同じようなことをやっているなと思って、前に手元で動かしてみようと試みたことがあることを書いておきます。萎えてやめましたが。</p>

<p>おまけで、MesosってのがLXCをもっと高度に抽象化して、クラスタで並べたnodeのmemoryとcpuリソースをアプリケーションに適切に配分するとかやってるみたいですが、詳しくは知りません。Twitterはガシガシ使っているそうです。</p>

<ul>
<li><a href="http://incubator.apache.org/mesos/">Apache Mesos: Dynamic Resource Sharing for Clusters</a></li>
</ul>


<h2>おわりに</h2>

<p>Dockerが良さそうだなぁと思ったので、ここ最近考えてることを合わせて言語化しておきました。英語で書くには英語力が足りないのと誰にも読んでもらえないorz</p>

<p>問題はこれが所詮POCで、こういうことを実際にやるモチベーションは特にないので、机上の空論感がとても強いこと。多少の環境の差異はなんとなく乗りきれちゃったりするしそもそも完璧に管理する必要ないことが多い。もしくは寿命ギリギリまで環境を出来る限り変えずにやり過ごすのが一番簡単なやり方なので、今頑張る必要なくて、そしてずっと頑張る必要がないような話題だったりもします。この辺はサービスのライフサイクルとかも絡めて話をしたいところです。</p>

<p>ただ夢を見続けることはした方がいいのかなと思うのと、そもそもその夢間違ってるよってのも言って欲しくてとりあえず書きなぐっておきました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tech Blog始めました&ブログの始め方]]></title>
    <link href="http://tech.riywo.com/blog/2013/04/16/test-entry/"/>
    <updated>2013-04-16T22:51:00-07:00</updated>
    <id>http://tech.riywo.com/blog/2013/04/16/test-entry</id>
    <content type="html"><![CDATA[<p>このエントリを読んで、そういえば最近全くアウトプットができていないことにはたと気づきました。@sunaot++</p>

<p><a href="http://sunaot.tumblr.com/post/48053101279/4">4 月にエンジニアとなった人たちに知っておいてもらいたいこと</a></p>

<p>というわけで、「そうだ、ブログを書こう」となりました。メインのブログの方で書いてもいいんですが、なんとなく技術寄りのものは別にまとめてみたいなぁと思って、最近流行りのOctopress+Github Pagesで作ってみました。このブログの作り方を共有するところからまずは出発しようかと思います。</p>

<ul>
<li><a href="http://tech.riywo.com/">As a SW/Ops/DB Engineer</a></li>
</ul>


<!-- more -->


<p>とは言っても、ドキュメントがよくできてるので特に解説することはありませんでした。。。</p>

<ul>
<li>参考サイト

<ul>
<li><a href="http://octopress.org/docs/">Octopress Documentation &ndash; Octopress</a></li>
<li><a href="https://help.github.com/categories/20/articles">GitHub Help</a></li>
<li><a href="http://www.miukoba.net/blog/2013/01/05/start-octopress/">Octopressはじめました &ndash; mimemo</a></li>
</ul>
</li>
</ul>


<h2>local setup</h2>

<ul>
<li><a href="http://octopress.org/docs/setup/">Octopress Setup &ndash; Octopress</a></li>
</ul>


<p>まずはこれに従ってローカルにファイルを落とす。rbenv使ってて、<code>.rbenv-version</code>のが入って無かったので<code>rbenv local</code>で適当に自分の持ってるバージョンを指定。<code>bundle</code>はいつも通り<code>bundle install --path vendor/bundle --binstubs</code>。<code>--binstubs</code>用に<code>.bash_profile</code>とかで<code>export PATH="./bin:$PATH"</code>してます。</p>

<p><code>rake install</code>したら次へ。</p>

<h2>github setup</h2>

<ul>
<li><a href="http://octopress.org/docs/deploying/github/">Deploying to Github Pages &ndash; Octopress</a></li>
</ul>


<p>githubにはpagesという静的コンテンツ配信をしてくれる仕組みがあります。これを利用してかつカスタムドメインで自分のドメインを使います(github.com=>github.ioに勝手にドメインが変えられたりするので、パーマリンク厨的には自分のドメインで配信したいのです)。</p>

<p>ところが、github pagesのカスタムドメインは<strong>1ユーザ</strong>につき1つしか設定できないので、プロジェクト毎のページのリンクはusername.github.io/projectになってしまいます。僕は既に別のサイトを自分のgithub pagesで配信してるのでさて困った。</p>

<p>というわけでorganizationを使います。organizationのメインgithub pagesにもカスタムドメインが設定できるからですね。publicなレポジトリであればorganizationを作るのは無料なのでこのブログ専用のorganizationを作りました。</p>

<p>そうしたら、ブログ用のレポジトリを作ります。名前は必ず<code>organame.github.io</code>になります。もちろんpublic。</p>

<p>作ったら<code>git@github.com</code>で始まるパスをコピーしておいて、おもむろに<code>rake setup_github_pages</code>を実行。URLを聞かれたらさっきのを入力。あとは<code>rake generate</code>, <code>rake deploy</code>したら、<code>http://organame.github.io</code>でもう見れるはず。github++</p>

<h3>custom domain</h3>

<ul>
<li><a href="https://help.github.com/articles/setting-up-a-custom-domain-with-pages">Setting up a custom domain with Pages · GitHub Help</a></li>
</ul>


<p>カスタムドメインもそんなに難しくない。上記の通り、TLDならAレコード、それ以外ならCNAMEを設定。あとは、<code>echo orgname.example.com &gt;&gt; source/CNAME</code>として、先ほどの<code>rake</code>を再実行すれば終わり。</p>

<h2>source repo</h2>

<p>さて、先ほど<code>orgname.gihub.io</code>にpushされたのはOctopressによって生成された静的コンテンツなわけですが、それらの元になっているファイルも当然githubで管理したくなります。</p>

<p>別にpublicで良ければOctopressの手順通り、<code>git push origin source</code>とすれば、先ほどのorganizationのレポジトリに<code>source</code>ブランチができて完了です。</p>

<p>僕はなんとなくsourceはprivateにしたかったのでちょっと変なやりかたをしました。自分のユーザ配下にprivateレポジトリを作成して、そこに向けてpushするようにします。多分こんな感じでいけるはず。</p>

<pre><code>$ git remote add private PRIVATE_REPO_URL 
$ git config branch.source.remote private
$ git push -u private source
</code></pre>

<p>これで<code>git push</code>すればsourceはprivateの方にいきます。</p>

<h2>configuration</h2>

<p><code>_config.yml</code>を見ながら適当に編集。そのうち頑張る。</p>

<h2>first post</h2>

<p>あとはエントリを書くだけ。<code>rake new_post['post title']</code></p>

<p>とりあえずMouを試用してます。ただ、<code>rake preview</code>としておけばローカルにサーバ立ててくれてリアルタイムに反映されるので、リロードするだけでプレビューできるので要らないかも。</p>

<h1>おわりに</h1>

<p>今日は日本人のハッカーの方達と晩御飯食べましたが、みなさんかっこよくてちょっとでも近づけるように頑張ろうと思えて、とても元気出ました。このブログが誰かの何かの役に立てば幸いです。たまに日本語だったりたまに英語だったりすると思います。書きやすさとその日の気分重視。</p>
]]></content>
  </entry>
  
</feed>
